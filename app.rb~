require 'sinatra'
 
class Backend
	def self.test(year)
	   puts "#{year} is tested"
	end
end
 
get '/' do
	@wetout = "default"
	erb :weather
end
 
post '/' do
	year = params[:post][:year]
	month = params[:post][:month] 
	day = params[:post][:day] 
	@wetout = "#{year} year! #{month} is the month! #{day} is the day!"
	@wetout = "#{@wetout} and now some codes for ya!"  
	Backend.test(year)
	erb :weather
end


### old forecastapp standalone 

require 'forecast_io'
require "rubygems" 
require "json"
require "hashie" 



class Weatherparse
   @@testman = "ham"
   def self.forecast 
      Forecast::IO.configure do |configuration|
        configuration.api_key = '284bc96ec58d70d124724420603ff493'
      end
      year = 2008
      month = 23 
      day = 8
      forecast = Forecast::IO.forecast(29.9728,-90.0590, time: Time.new(2005,8,29).to_i)
      forecast.time = Time.new(year,day,month).to_i 
      @@pressure = forecast.currently.pressure  
      puts "#{@@pressure} is the pressure" 
      @@precipItensity = forecast.currently.precipIntensity 
      puts "#{@@precipItensity} is the precipitation intensity" 
      @@dewpoint = forecast.currently.dewPoint
      puts "#{@@dewpoint} is the dewpoint baby"                  
      @@summary = forecast.currently.summary 
      puts @@summary
      @@temperature = forecast.currently.temperature 
      puts"#{ @@temperature} is the temperature"  
      @@windspeed = forecast.currently.windSpeed 
      puts "#{@@windspeed} is the windspeed"    
      @@windbearing = forecast.currently.windBearing 
      puts "#{@@windbearing}  is the wind bearing" 
      @@cloudcover = forecast.currently.cloudCover
      puts "#{@@cloudcover} is the cloud cover" 
      @@humidity = forecast.currently.humidity 
      puts "#{@@humidity} is the humidity" 
      @@visibility = forecast.currently.visibility 
      puts "#{@@visibility} is the visibility" 
      @@ozone = forecast.currently.ozone 
      puts "#{@@ozone} is the ozone" 
      
   end    
#add second method for second location 
   def self.dewpoint 
    @@weatheroutput  = "SincOsc #{@@testman} test #{@@pressure}"    
      puts @@weatheroutput  

   end 
  
  def self.concatex
     (0..5).each do |i|
   @@randomthing = Random.rand(6) 
       if @@randomthing <=  3
       @@weatheroutput = "#{@@weatheroutput} added #{i}"
       puts @@weatheroutput  
      end 
    end 
  end 
end 
     
Weatherparse.forecast 
Weatherparse.dewpoint
Weatherparse.concatex  
